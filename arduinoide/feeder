/* =========================================================
   Pet Feeder ESP8266 ‚Äì FW_VERSION 1
   LED estado | dispensa manual | reset 10-tap
   Hor√°rios persistentes | OTA IDE + OTA via MQTT
   ========================================================= */
#include <ESP8266WiFi.h>
#include <WiFiManager.h>
#include <Ticker.h>
#include <ArduinoOTA.h>
#include <ESP8266HTTPClient.h>
#include <ESP8266httpUpdate.h>

#define MQTT_MAX_PACKET_SIZE 1024
#include <PubSubClient.h>

#include <LittleFS.h>
#include <ArduinoJson.h>
#include <time.h>
#include <BearSSLHelpers.h>

/* ---------- Firmware ---------- */
#define FW_VERSION 1

/* ---------- Pinos ---------- */
#define LED_PIN  13
#define BTN_PIN   5
#define STEP_PIN 14
#define DIR_PIN  16
#define EN_PIN   12

/* ---------- Reset 10-tap ---------- */
#define REQUIRED_TAPS 10
#define TAP_WINDOW_MS 15000

/* ---------- MQTT ---------- */
const char* mqtt_broker   = "ha86020d.ala.eu-central-1.emqxsl.com";
const int   mqtt_port     = 8883;
const char* mqtt_topic    = "petfeeder/command";
const char* mqtt_username = "mrhormigo";
const char* mqtt_password = "Hormigo23888";

/* ---------- NTP ---------- */
const char* ntp_server = "pool.ntp.org";

/* ---------- CAs ---------- */
static const char mqtt_ca[] PROGMEM = R"EOF(
-----BEGIN CERTIFICATE-----
MIIDrzCCApegAwIBAgIQCDvgVpBCRrGhdWrJWZHHSjANBgkqhkiG9w0BAQUFADBh
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMSAwHgYDVQQDExdEaWdpQ2VydCBHbG9iYWwgUm9vdCBD
QTAeFw0wNjExMTAwMDAwMDBaFw0zMTExMTAwMDAwMDBaMGExCzAJBgNVBAYTAlVT
MRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdpY2VydC5j
b20xIDAeBgNVBAMTF0RpZ2lDZXJ0IEdsb2JhbCBSb290IENBMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4jvhEXLeqKTTo1eqUKKPC3eQyaKl7hLOllsB
CSDMAZOnTjC3U/dDxGkAV53ijSLdhwZAAIEJzs4bg7/fzTtxRuLWZscFs3YnFo97
nh6Vfe63SKMI2tavegw5BmV/Sl0fvBf4q77uKNd0f3p4mVmFaG5cIzJLv07A6Fpt
43C/dxC//AH2hdmoRBBYMql1GNXRor5H4idq9Joz+EkIYIvUX7Q6hL+hqkpMfT7P
T19sdl6gSzeRntwi5m3OFBqOasv+zbMUZBfHWymeMr/y7vrTC0LUq7dBMtoM1O/4
gdW7jVg/tRvoSSiicNoxBN33shbyTApOB6jtSj1etX+jkMOvJwIDAQABo2MwYTAO
BgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUA95QNVbR
TLtm8KPiGxvDl7I90VUwHwYDVR0jBBgwFoAUA95QNVbRTLtm8KPiGxvDl7I90VUw
DQYJKoZIhvcNAQEFBQADggEBAMucN6pIExIK+t1EnE9SsPTfrgT1eXkIoyQY/Esr
hMAtudXH/vTBH1jLuG2cenTnmCmrEbXjcKChzUyImZOMkXDiqw8cvpOp/2PV5Adg
06O/nVsJ8dWO41P0jmP6P6fbtGbfYmbW0W5BjfIttep3Sp+dWOIrWcBAI+0tKIJF
PnlUkiaY4IBIqDfv8NZ5YBberOgOzW6sRBc4L0na4UU+Krk2U886UAb3LujEV0ls
YSEY1QSteDwsOoBrp+uvFRTp2InBuThs4pFsiv9kuXclVzDAGySj4dzp30d8tbQk
CAUw7C29C79Fv1C5qfPrmAESrciIxpg0X40KPMbp1ZWVbd4=
-----END CERTIFICATE-----
)EOF";

static const char ota_ca[] PROGMEM = R"EOF(
-----BEGIN CERTIFICATE-----
MIIFazCCA1OgAwIBAgIQDJKISfFwPg5gOgC0hGrUrzANBgkqhkiG9w0BAQsFADBD
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMR8wHQYDVQQDExZE
aWdpQ2VydCBUQ0MgU2hhMiBJUzI1MB4XDTI0MDQwMTAwMDAwMFoXDTI1MDQwMjIz
NTk1OVowgYExEzARBgoJkiaJk/IsZAEZFgNjb20xEzARBgoJkiaJk/IsZAEZFgVn
aXRodWIxHTAbBgNVBAMTFHdhdy5naXRodXNlcmNvbnRlbnQuY29tMSAwHgYDVQQL
ExdEb21haW4gQ29udHJvbCBWYWxpZGF0ZWQxFjAUBgNVBAoTDUdpdEh1YiBJbmMu
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAw5qWqpvKScFbU+JXgf1R
jKs9mbNUSLHgNeiAoh3S9MiZdxqQo0THY9QczhUb+2RruwScRMe8HDB/cVDKHArz
Mg7GYOwaGsYdhmiNdZBdFQKsk7M5cUAdOK+6qAJRMrz+FzZJtR7fYX7X4r2L81eO
VIX+0LSu8WlhqkMySyXJhzMfExN5OU8GpYQmOBAPElL5BrNZaRWXt52KH9IN6axh
3s/fJ7+Mx5ytJuX3oa6uGWaL+BqKh0emVnmN6NG/F+niuwgIVsfFej3W8yjaDo5Z
wZq25tuK+W9RjS8xW6U88DflgCBBLePpeHaa7D2xHFypPz7f3wLHLmCMa6DU7SPZ
0QIDAQABo4IBhjCCAYIwHwYDVR0jBBgwFoAUYqVRiD3OSYx4WvKWCVoeJtqsuL8w
HQYDVR0OBBYEFOIymZ7XIG8RHxrcbUAlIUw4PBxpMA4GA1UdDwEB/wQEAwIFoDAW
BgNVHSUBAf8EDDAKBggrBgEFBQcDAzAdBgNVHQ4EFgQUW0jTSJpElCtzcu0avmBg
F7WJg6swDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEF
BQcDAjCCAX4GA1UdHwSCAXMwggFvMIIBbaCCAWGgggFhoIIBWaSBkzCBkDELMAkG
A1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEfMB0GA1UEAxMWRGlnaUNl
cnQgVENUIFNoYTIgSVMyNTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0
IEluYzEWMBQGA1UEAxMNRGlnaUNlcnQgUm9vdDCCASIwDQYJKoZIhvcNAQEBBQAD
ggEPADCCAQoCggEBAK1QTLXhzmm1zVsKYKcq9N/NEuLSyoB5O0M42fpx2hIvkQbA
9y5aAFmEeIL0Cz8UOZQEfTYzKfDg7uK5h0yLjvNmuwVCplYrDFOzBdU0WgYPwUNB
Z8gOW+y1tNUw5vRC1zAIWrnXprF9ZGohBSzkGcPRLxkk/o5Mw6NYZ+TfdIdNUYJZ
dTbkpYkhVDWduUwRc9yBl1r+gbNF0xFFECmvGz3zMRzIm1QYbd7bYwVWzNQ61WJy
Kf+3HbqItG7wWKT4e8uC0MI6Qn4fPGXz6fp1R6BJS2O2EKLwL2fh3bd6Lv3ukMnl
/0tAkRCmIDUGK2FNB37bCPmg+ehF+mg4ZbK3YSkCAwEAAaOCAYcwggGDMAwGA1Ud
EwEB/wQCMAAwgZcGA1UdEQRgMF6CFHdhdy5naXRodXNlcmNvbnRlbnQuY29tghNk
aXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbYIYcmF3LmdpdGh1YnVzZXJjb250ZW50
LmNvbYIKZ2l0aHViLmNvbYIad3d3LmdpdGh1YnVzZXJjb250ZW50LmNvbYITZ2l0
aHVidXNlcmNvbnRlbnQuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQByTYfkrxStwaQA
xHZlbkJ3FvqpvGZckHFMlZB2L5VWcnCaf9YKnK5OgMeUlDptGeJzEKb2MLZiv+XT
05zx+uOfqedBa7URFytbnptSBhrQl3XNcMfgTF+96GHFmpSkzPuFOjNGNQCCxT/F
vWyvuU36yR0Qp25i2CSJ3eEgjTj20orx9d4aEsUbke8odZZYGc8q/l2pRVH2ZWcZ
o5nmGoKi0aGvZYOl09QKfmoPW5X6R4vR5GUoIY9khpoUzRz1nPUq69/O9M+rU2NV
EokRLaB9rJdMkzYIbkzE6CeTuGvE4HpDNrEu7nxZnJKRzAV1UN31RkoFdjsPLZZ9
KHdaEm9f
-----END CERTIFICATE-----
)EOF";

/* ---------- LED ---------- */
Ticker blinkT, breathT;
bool ledBlink=false, ledBreath=false;
int  breathVal=0, breathDir=18;

void toggleLED(){ digitalWrite(LED_PIN,!digitalRead(LED_PIN)); }
void breathStep(){ analogWrite(LED_PIN,breathVal);
                   breathVal+=breathDir;
                   if(breathVal>=1023||breathVal<=0) breathDir=-breathDir; }
void startBlink(){ pinMode(LED_PIN,OUTPUT);
                   breathT.detach(); blinkT.detach();
                   digitalWrite(LED_PIN,LOW);
                   blinkT.attach(0.5,toggleLED);
                   ledBlink=true; ledBreath=false; }
void stopBlink(){  blinkT.detach(); digitalWrite(LED_PIN,HIGH); ledBlink=false; }
void startBreath(){ pinMode(LED_PIN,OUTPUT);
                    blinkT.detach(); breathT.detach();
                    breathVal=0; breathDir=18;
                    breathT.attach_ms(30,breathStep);
                    ledBreath=true; ledBlink=false; }
void stopBreath(){ breathT.detach(); analogWrite(LED_PIN,1023); ledBreath=false; }

/* ---------- Dispensa manual ---------- */
#define MANUAL_STEP_MS 1
Ticker manualT; bool manualActive=false;
void stepPulse(){ digitalWrite(STEP_PIN,HIGH); delayMicroseconds(4); digitalWrite(STEP_PIN,LOW); }
void startManual(){ Serial.println("üñêÔ∏è Dispensa manual ON");
                    digitalWrite(DIR_PIN,LOW); digitalWrite(EN_PIN,LOW);
                    manualT.attach_ms(MANUAL_STEP_MS,stepPulse); manualActive=true; }
void stopManual(){  manualT.detach(); digitalWrite(EN_PIN,HIGH);
                    manualActive=false; Serial.println("üñêÔ∏è Dispensa manual OFF"); }

/* ---------- Estrutura de hor√°rios ---------- */
struct Schedule{ int h=-1,m=-1,st=200,sp=800,as=0; float ar=0.0; bool rev=false; };
Schedule sch[4]; int schCnt=0;
bool suspend=false; time_t lastTrig=0;

/* ---------- Inst√¢ncias ---------- */
BearSSL::WiFiClientSecure ssl;
PubSubClient mqtt(ssl);

/* ---------- Motor ---------- */
void runMotor(int steps,int speed,bool rev,int anti,float ratio){
  randomSeed(micros());
  if(anti>0){
    digitalWrite(DIR_PIN,rev?LOW:HIGH); digitalWrite(EN_PIN,LOW);
    for(int i=0;i<anti;i++){ digitalWrite(STEP_PIN,HIGH); delayMicroseconds(speed);
                             digitalWrite(STEP_PIN,LOW ); delayMicroseconds(speed); }
  }
  long inv=anti? (long)(steps*ratio) : 0;
  long blocks=anti? inv/anti : 0; long chunks=blocks+1;
  long fwd=(blocks? (steps-inv)/chunks : steps);
  long done=0; digitalWrite(EN_PIN,LOW);
  for(long b=0;b<chunks;b++){
    digitalWrite(DIR_PIN,rev?HIGH:LOW);
    for(long i=0;i<fwd && done<steps;i++,done++){
      digitalWrite(STEP_PIN,HIGH); delayMicroseconds(speed);
      digitalWrite(STEP_PIN,LOW ); delayMicroseconds(speed);
      if(done%1000==0) yield();
    }
    if(b<blocks){
      digitalWrite(DIR_PIN,rev?LOW:HIGH);
      for(int j=0;j<anti;j++,done++){
        digitalWrite(STEP_PIN,HIGH); delayMicroseconds(speed);
        digitalWrite(STEP_PIN,LOW ); delayMicroseconds(speed);
        if(done%1000==0) yield();
      }
    }
  }
  digitalWrite(EN_PIN,HIGH);
  Serial.println("‚úÖ Motor terminou");
}

/* ---------- Reset ---------- */
volatile uint8_t taps=0; volatile unsigned long firstTap=0; volatile bool resetFlag=false;
ICACHE_RAM_ATTR void tapISR(){
  if(digitalRead(BTN_PIN)==HIGH){
    unsigned long now=millis();
    if(taps==0||(now-firstTap)>TAP_WINDOW_MS){ taps=1; firstTap=now; }
    else if(++taps>=REQUIRED_TAPS){ resetFlag=true; taps=0; }
  }
}
void fullReset(){
  Serial.println("üõ†Ô∏è Reset total");
  WiFiManager wm; wm.resetSettings();
  if(LittleFS.exists("/schedules.json")) LittleFS.remove("/schedules.json");
  delay(300); ESP.restart();
}

/* ---------- OTA HTTPS ---------- */
void httpUpdate(const String &url) {
  Serial.println("üîÑ In√≠cio do processo OTA via HTTP");
  Serial.print("üåê A ligar ao URL: ");
  Serial.println(url);

  digitalWrite(LED_PIN, LOW);

  WiFiClient client;  // üëà Cliente HTTP (n√£o seguro)
  ESPhttpUpdate.rebootOnUpdate(true);

  t_httpUpdate_return ret = ESPhttpUpdate.update(client, url);

  switch (ret) {
    case HTTP_UPDATE_FAILED:
      Serial.println("‚ùå OTA falhou:");
      Serial.printf("    ‚û§ Erro n¬∫: %d\n", ESPhttpUpdate.getLastError());
      Serial.printf("    ‚û§ Motivo:  %s\n", ESPhttpUpdate.getLastErrorString().c_str());
      break;

    case HTTP_UPDATE_NO_UPDATES:
      Serial.println("‚ö†Ô∏è  Nenhuma atualiza√ß√£o dispon√≠vel");
      break;

    case HTTP_UPDATE_OK:
      Serial.println("‚úÖ OTA conclu√≠da com sucesso");
      break;
  }

  digitalWrite(LED_PIN, HIGH);
}

/* ---------- Persist√™ncia ---------- */
void saveAll(){
  DynamicJsonDocument d(1152);
  d["fw"]=FW_VERSION; d["susp"]=suspend;
  JsonArray a=d.createNestedArray("sch");
  for(int i=0;i<schCnt;i++){
    JsonObject o=a.createNestedObject();
    o["h"]=sch[i].h; o["m"]=sch[i].m; o["st"]=sch[i].st; o["sp"]=sch[i].sp;
    o["as"]=sch[i].as; o["ar"]=sch[i].ar; o["r"]=sch[i].rev;
  }
  File f=LittleFS.open("/schedules.json","w");
  if(f){ serializeJson(d,f); f.close(); Serial.println("üíæ Guardado"); }
}
void loadAll(){
  if(!LittleFS.exists("/schedules.json")) return;
  File f=LittleFS.open("/schedules.json","r"); if(!f) return;
  DynamicJsonDocument d(1152);
  if(deserializeJson(d,f)){ Serial.println("JSON inv√°lido"); return; }
  if(d["fw"]!=FW_VERSION){ Serial.println("‚ö†Ô∏è Vers√£o diferente ‚Äì limpo"); return; }
  suspend=d["susp"]|false; JsonArray a=d["sch"]; schCnt=0;
  for(JsonObject o:a){
    if(schCnt>=4) break;
    Schedule &s=sch[schCnt++]; s.h=o["h"]; s.m=o["m"]; s.st=o["st"]; s.sp=o["sp"];
    s.as=o["as"]|0; s.ar=o["ar"]|0.0; s.rev=o["r"]|false;
    Serial.printf("üìÇ %02d:%02d  %d passos anti:%d/%.2f rev:%d\n",
                  s.h,s.m,s.st,s.as,s.ar,s.rev);
  }
  f.close();
}

/* ---------- MQTT callback ---------- */
void mqttCB(char*,byte* pay,unsigned len){
  String msg; for(unsigned i=0;i<len;i++) msg+=(char)pay[i];
  DynamicJsonDocument d(1024);
  if(deserializeJson(d,msg)){ if(msg=="feed") runMotor(200,800,false,0,0); return; }

  if(d["command"]=="feed"){
    runMotor(d["steps"]|200,d["speed"]|800,d["reverse"]|false,
             d["anticlog_steps"]|0,d["anticlog_ratio"]|0.0);
  }
  if(d.containsKey("suspend")){ suspend=d["suspend"]; saveAll(); }
  if(d.containsKey("schedules")){
    JsonArray a=d["schedules"]; schCnt=0;
    for(JsonObject o:a){
      if(schCnt>=4) break;
      Schedule &s=sch[schCnt++]; s.h=o["hour"]; s.m=o["minute"];
      s.st=o["steps"]; s.sp=o["speed"];
      s.as=o["anticlog_steps"]|0; s.ar=o["anticlog_ratio"]|0.0;
      s.rev=o["reverse"]|false;
      Serial.printf("üóìÔ∏è %d) %02d:%02d %d passos anti:%d/%.2f rev:%d\n",
                    schCnt,s.h,s.m,s.st,s.as,s.ar,s.rev);
    }
    saveAll();
  }
  if(d.containsKey("ota_url")) httpUpdate(String((const char*)d["ota_url"]));
}

/* ---------- Conex√µes ---------- */
void wifiConnect(){
  startBlink();
  WiFiManager wm; wm.setConnectTimeout(30); wm.setConfigPortalTimeout(180);
  if(wm.autoConnect("PetFeeder-Setup","12345678")){
    stopBlink(); Serial.printf("‚úÖ IP %s\n",WiFi.localIP().toString().c_str());
  }else Serial.println("‚ö†Ô∏è Portal cativo aberto");
}
void timeSync(){
  configTime(0,0,ntp_server);
  setenv("TZ","WET-0WEST,M3.5.0/1,M10.5.0/2",1); tzset();
  while(time(nullptr)<100000) delay(200);
}
void mqttConnect(){
  BearSSL::X509List mqttTrust(mqtt_ca);
  ssl.setTrustAnchors(&mqttTrust);
  mqtt.setServer(mqtt_broker,mqtt_port);
  mqtt.setCallback(mqttCB);
  while(!mqtt.connected()){
    if(mqtt.connect(("petfeeder-"+String(ESP.getChipId())).c_str(),
                    mqtt_username,mqtt_password)){
      mqtt.subscribe(mqtt_topic); Serial.println("‚úÖ MQTT ligado");
    }else{ Serial.printf("‚ùå MQTT %d\n",mqtt.state()); delay(3000); }
  }
}

/* ---------- Setup ---------- */
void setup(){
  Serial.begin(115200);
  pinMode(STEP_PIN,OUTPUT); pinMode(DIR_PIN,OUTPUT);
  pinMode(EN_PIN,OUTPUT); digitalWrite(EN_PIN,HIGH);
  pinMode(BTN_PIN,INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(BTN_PIN),tapISR,RISING);

  LittleFS.begin(); wifiConnect(); timeSync();

  ArduinoOTA.setHostname("PetFeeder"); ArduinoOTA.begin();

  mqtt.setBufferSize(1024); mqttConnect(); loadAll();

  if(suspend) startBreath();
  else if(WiFi.status()!=WL_CONNECTED) startBlink();
  else stopBlink();
}

/* ---------- Loop ---------- */
void loop(){
  if(resetFlag){ noInterrupts(); resetFlag=false; interrupts(); fullReset(); return; }

  ArduinoOTA.handle();

  if(digitalRead(BTN_PIN)==HIGH && !manualActive) startManual();
  else if(digitalRead(BTN_PIN)==LOW && manualActive) stopManual();

  if(suspend){ if(!ledBreath) startBreath(); }
  else{
    if(WiFi.status()!=WL_CONNECTED){ if(!ledBlink) startBlink(); }
    else{ if(ledBlink) stopBlink(); if(ledBreath) stopBreath(); }
  }

  if(!mqtt.connected()) mqttConnect();
  mqtt.loop();

  if(suspend) return;

  time_t now=time(nullptr); struct tm* t=localtime(&now);
  for(int i=0;i<schCnt;i++){
    Schedule &s=sch[i];
    if(s.h==t->tm_hour && s.m==t->tm_min && abs(now-lastTrig)>60){
      Serial.printf("üöÄ %02d:%02d %d passos anti:%d/%.2f rev:%d\n",
                    s.h,s.m,s.st,s.as,s.ar,s.rev);
      runMotor(s.st,s.sp,s.rev,s.as,s.ar); lastTrig=now;
    }
  }
}
